<div class="container g-width-100-percent--xs{%comment%}g-padding-x-20--xs g-padding-x-40--md g-width-100-percent--xs{%endcomment%}">
    <div class="">
        <div class="col-md-4">

            {% comment %}
                ******* Filtering System for Campuses via Groups *****
            {% endcomment %}

            {% assign pageParamCampusId = 'Global' | PageParameter:'campusId' %}
            {% assign campusIdSize = pageParamCampusId | Size %}
            {% assign pageParamCampus = 'Global' | PageParameter:'campus' | Downcase | Replace:"-","" %}
            {% assign selectedCampus = null %}
            {% for campus in Campuses %}
                {% assign campusName = campus.Name | Downcase | Replace:" ",""  %}
                {% if campus.Id == pageParamCampusId or campusName == pageParamCampus %}
                    {% assign selectedCampus = campus %}
                    {% break %}
                {% endif %}
            {% endfor %}

            <style>
            .readmore_dates {
            transition: height 100ms;
            overflow: hidden;
            display: none;
            }
            .isotope_item {
                z-index: 1;
            }

            .grid {
                display: grid;
                grid-template-columns: 100%;
            }
            @media (min-width: 48em) {
                .grid { grid-template-columns: 50% 50%; }
            }

            .event-calendar .card {
                border-radius: 4px;
                }
            .event-calendar .card:hover,
            .event-calendar .card:focus,
            .event-calendar .card:active {
                background-color: rgba(254, 240, 228, 0.3);
                }
            </style>

            <div class="g-padding-t-150--xs g-padding-b-50--xs">
                <div class="">
                    <div class="" >
                        <h2 class="g-font-family--secondary">Find a Group</h2>
                        <p class="g-font-weight--400 g-line-height--sm g-padding-y-20--xs g-padding-y-50--md" style="color: #616264;">Find a group that interests you by selecting a location, date and/or ministry. Click on the image to see more details or to register.</p>
                        <div id="groupFilters" class="g-display-block--xs">

                            <div class="g-display-inline-block--xs g-padding-x-5--xs g-width-100-percent--xs g-width-50-percent--lg">
                                <select class="select2-campuses" name="campus" data-control="#groupFilters">
                                    <option value="allCampuses" data-shortcode="SE" data-campus="" {% if selectedCampus == null %} selected="selected"{% endif %}>All Locations</option>
                                    {% for campus in Campuses %}
                                        {% assign publicCampus = campus | Attribute:'Public' %}
                                        {% if publicCampus == 'Yes' %}
                                            <option value="{{ campus.Id }}" data-shortcode="{{ campus.ShortCode }}" data-campus="{{ campus.Name | Downcase | Replace:" ",""}}"{% if selectedCampus.Id > 0 and selectedCampus.Id == campus.Id %} selected="selected"{% endif %}>
                                                {{ campus.Name }}
                                            </option>
                                        {% endif %}
                                    {% endfor %}
                                </select>
                            </div>

                            <div class="g-display-inline-block--xs g-padding-x-5--xs g-width-100-percent--xs g-width-50-percent--lg" tabindex="0" style="outline: none;">
                                <span id="GroupTypeFilter" class="se-dropdown" data-toggle="dropdown-content" data-reveal="typeSelected" aria-expanded="false" data-control="#groupFilters">
                                    Ministries <span class="count"></span>
                                    <span class="arrow" role="presentation"><b role="presentation"></b></span>
                                </span>
                                <div id="typeSelected" class="button-group filter-button-group g-padding-x-10--xs g-display-inline-block--xs g-margin-t-10--xs">
                                    <p>Select categories of your interests:</p>
                                    {%- definedvalue where:'DefinedTypeId==52' -%}
                                        {%- assign definedvalueItemsSorted = definedvalueItems | Sort: 'Order' -%}
                                        {%- for definedValue in definedvalueItemsSorted -%}
                                            {%- if definedValue != '' -%}
                                                <a class="button se-btn se-btn--tag no-transitions uppercase g-margin-y-5--xs g-margin-x-5--xs" data-type="{{ definedValue.Id }}">{{ definedValue.Value | Capitalize }} <span class="count"></span></a>
                                            {%- endif -%}
                                        {%- endfor -%}
                                    {%- enddefinedvalue -%}
                                    <div id="noOptions" class="row" style="display: none;">
                                            <div class="text-center">
                                                <div style="background-color: #efefef;padding: 5px;border-radius: 5px;">
                                                    <p style="margin: 0px;">None</p>
                                                </div>
                                            </div>
                                    </div>
                                </div>
                            </div>

                            <style>
                            .se-dropdown {
                                border: 1px solid rgba(29, 31, 33, 0.20);
                                border-radius: 4px;
                                cursor: pointer;
                                padding: 5px 70px 5px 15px;
                                display: block;
                                white-space: nowrap;
                                text-overflow: ellipsis;
                                overflow: hidden;
                                color: black;
                                line-height: 28px;
                                font-weight: 400;
                                box-sizing: border-box;
                                display: inline-block;
                                margin: 0;
                                position: relative;
                                vertical-align: middle;
                                margin-top: 5px;
                                min-width: 170px;
                                z-index: 10;
                                width: 100%;
                            }
                            .se-dropdown .arrow {
                                height: auto;
                                position: absolute;
                                top: 19px;
                                right: 15px;
                                width: 20px;
                            }
                            .se-dropdown .arrow b {
                                border-color: white;
                                border-style: none;
                                border-width: 0px;
                                height: 0;
                                position: absolute;
                                width: 0;
                            }
                            .se-dropdown .arrow b:before {
                                width: 10px;
                                height: 10px;
                                content: "";
                                border: solid #000000;
                                border-width: 0 2px 2px 0;
                                display: inline-block;
                                position: absolute;
                                top: 55%;
                                left: 50%;
                                transition: all 0.4s ease;
                                transform: translate(-50%, -50%) rotate(45deg);
                                -webkit-transform: translate(-50%, -50%) rotate(45deg);
                            }
                            .se-dropdown + div {
                                box-shadow:0px 0px 5px 1px rgba(0, 0, 0, 0.15);
                                padding: 15px;
                                display: none;
                                position: absolute;
                                background-color: #FFFFFF;
                                overflow: visible;
                                box-sizing: border-box;
                                z-index: 1051;
                                margin-bottom: 20px;
                            }
                            .se-dropdown[aria-expanded="true"] + div {
                                display: block;
                            }
                            .se-dropdown[aria-expanded="true"] .arrow b:before {
                                transform: translate(-50%, -50%) rotate(-135deg);
                                -webkit-transform: translate(-50%, -50%) rotate(-135deg);
                                top: 3px;
                            }

                            .se-input {
                                background-color: white;
                                border: 1px solid rgba(29, 31, 33, 0.20);
                                border-radius: 4px;
                                box-sizing: border-box;
                                color: #1D1F21;
                                display: inline-block;
                                font-weight: 400;
                                font-size: 1rem;
                                line-height: 28px;
                                margin: 5px 0 0 0;
                                min-width: 170px;
                                overflow: hidden;
                                padding: 5px 70px 5px 15px;
                                position: relative;
                                text-overflow: ellipsis;
                                vertical-align: middle;
                                white-space: nowrap;
                                width: 100%;
                                z-index: 10;
                            }
                            .se-zipcode-loading {
                                position: absolute;
                                right: 25px;
                                top: 18px;
                                z-index: 30;
                            }
                            @media (max-width:991px)
                            {
                                .se-dropdown + div {
                                    position: relative;
                                }
                            }
                            input[type=number]::-webkit-inner-spin-button,
                            input[type=number]::-webkit-outer-spin-button {
                            -webkit-appearance: none;
                            margin: 0;
                            }
                            </style>

                            <div class="g-display-inline-block--xs g-padding-x-5--xs g-width-100-percent--xs g-width-50-percent--lg" tabindex="0" style="outline: none;">
                                <!-- <span class="se-dropdown" data-toggle="dropdown-content" data-reveal="daysOfTheWeek" aria-expanded="false" data-control="#groupFilters" tabindex="0"> -->
                                <span id="MeetsOnFilter" class="se-dropdown" data-toggle="dropdown-content" data-reveal="daysOfTheWeek" aria-expanded="false" data-control="#groupFilters">
                                    Meets On <span class="count"></span>
                                    <span class="arrow" role="presentation"><b role="presentation"></b></span>
                                </span>
                                <div id="daysOfTheWeek" class="button-group filter-button-group g-padding-x-0--xs g-padding-x-10--sm g-display-inline-block--xs g-margin-t-10--xs">
                                    <p>Select a day of the week:</p>
                                    <div class="g-width-100-percent--xs text-center">
                                        <a class="button se-btn se-btn--tag uppercase no-transitions" data-filter="Sunday" data-toggle="tooltip" data-placement="bottom" title="Sunday">S</a>
                                        <a class="button se-btn se-btn--tag uppercase no-transitions" data-filter="Monday" data-toggle="tooltip" data-placement="bottom" title="Monday">M</a>
                                        <a class="button se-btn se-btn--tag uppercase no-transitions" data-filter="Tuesday" data-toggle="tooltip" data-placement="bottom" title="Tuesday">T</a>
                                        <a class="button se-btn se-btn--tag uppercase no-transitions" data-filter="Wednesday" data-toggle="tooltip" data-placement="bottom" title="Wednesday">W</a>
                                        <a class="button se-btn se-btn--tag uppercase no-transitions" data-filter="Thursday" data-toggle="tooltip" data-placement="bottom" title="Thursday">T</a>
                                        <a class="button se-btn se-btn--tag uppercase no-transitions" data-filter="Friday" data-toggle="tooltip" data-placement="bottom" title="Friday">F</a>
                                        <a class="button se-btn se-btn--tag uppercase no-transitions" data-filter="Saturday" data-toggle="tooltip" data-placement="bottom" title="Saturday">S</a>
                                    </div>
                                </div>
                            </div>

                            <div class="g-display-inline-block--xs g-padding-x-5--xs g-width-100-percent--xs g-width-50-percent--lg">
                                <input id="se-zipcode" class="se-input" placeholder="Zipcode" type="number" pattern="\d*" />
                                <i class="fas fa-circle-notch fa-spin se-zipcode-loading hidden"></i>
                            </div>

                            <div class="g-font-size-20--xs g-display-inline-block--xs col-xs-12 g-padding-x-5--xs g-padding-t-10--xs g-margin-b-20--xs text-left g-font-weight--400">
                                <div>
                                    <input id="se-handicap" class="" type="checkbox" name="Handicap Accessibility"/> <label for="se-handicap" class="g-font-size-16--xs g-font-weight--400 g-display-inline-block--xs g-padding-r-10--xs">Handicap Accessibility</label>
                                </div>
                                <div>
                                    <input id="se-otc" class="" type="checkbox" name="Open to Children" /> <label for="se-otc" class="g-font-size-16--xs g-font-weight--400 g-display-inline-block--xs g-padding-r-10--xs">Open to Children</label>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-md-8">

            <div class="g-margin-t-50--xs g-margin-b-80--xs">
                <div class="{%comment%}grid{%endcomment%}isotope_wrap is-showing-items">
                    {% for group in Groups %}
                        {% if group.IsActive and group.IsPublic %}

                            {% assign groupUrl = group.Campus | Attribute:'Slug' %}
                            {% assign groupLocations = group.GroupLocations %}
                            {% assign otc = group | Attribute: 'OpentoChildren' %}
                            {% assign handicapAcc = group | Attribute: 'HandicappedAccessible' %}
                            {% assign neighborhoodName = group | Attribute: 'NeighborhoodName' %}
                            {% comment %}
                                explain what is happening with groupTypes
                            {% endcomment %}
                            {% assign groupTypes = group | Attribute: 'SmallGroupTopic','Object' %}

                            {%- assign meetingType = '' -%}
                            {%- assign meetingLocations = 0 -%}
                            {%- assign groupZipCode = '' -%}

                            {%- for groupLocation in groupLocations -%}
                                {%- case groupLocation.GroupLocationTypeValueId -%}
                                    {%- when '209' -%}
                                    {% comment %} 209 == Meeting Location {% endcomment %}
                                        {% assign groupZipCode = groupLocation.Location.PostalCode %}
                                        {% assign meetingLocations = meetingLocations | Plus:1 %}
                                        {% assign meetingType = groupLocation.GroupLocationTypeValueId %}
                                    {%- when '19' and meetingType == '' -%}
                                    {% comment %} 19 == Home {% endcomment %}
                                        {% assign groupZipCode = groupLocation.Location.PostalCode %}
                                        {% assign meetingLocations = meetingLocations | Plus:1 %}
                                        {% assign meetingType = groupLocation.GroupLocationTypeValueId %}
                                    {%- when null and meetingType == '' -%}
                                    {% comment %} undefined {% endcomment %}
                                        {% assign groupZipCode = groupLocation.Location.PostalCode %}
                                        {% assign meetingLocations = meetingLocations | Plus:1 %}
                                        {% assign meetingType = groupLocation.GroupLocationTypeValueId %}
                                    {%- else -%}
                                        {% comment %} skipping any other group types
                                        since we don't know what they are, or it's
                                        a geographic area {% endcomment %}
                                {%- endcase -%}
                            {%- endfor -%}
                            {%- assign dayofWeek = group.Schedule.WeeklyDayOfWeek -%}
                            {%- if dayofWeek == null or dayofWeek == '' -%}
                                {%- assign dayofWeek = group.Schedule.iCalendarContent  | DatesFromICal  | First | Date:'dddd' -%}
                            {%- endif -%}
                            <div class="homegroup event-calendar isotope_item g-width-100-percent--xs g-width-49-percent--lg"
                                data-groupid="{{group.Id}}"
                                data-campus="{{ group.Campus.Name | Downcase | Replace:" ",""}}"
                                data-day="{{ dayofWeek }}"
                                data-handicap-accessible="{{ handicapAcc | Downcase }}"
                                data-open-to-children="{{ otc | Downcase }}"
                                data-type="{%- for groupType in groupTypes -%}{%- if forloop.first -%}{%- else -%},{%- endif -%}{{ groupType.Id }} {%- endfor -%}{{ groupTypes.Id }}"
                                data-zipcode="{{ groupZipCode | Truncate:5,'' }}">
                                <div class="clearfix card">

                                    <div class="caption g-padding-x-25--xs g-padding-x-30--md g-padding-t-30--xs g-padding-t-40--md g-margin-b-20--xs g-margin-b-25--md">
                                        <div class="distance-container hidden">
                                            <h6 class="uppercase g-padding-b-5--xs g-font-weight--700 g-width-100-percent--xs">
                                                Distance: <span class="distance"></span> miles
                                            </h6>
                                            <hr class="g-hor-divider__solid__t--gray-lighter" />
                                        </div>
                                        <h3 class="g-font-family--secondary g-font-size-24--xs g-font-size-32--md g-padding-b-20--xs g-padding-b-25--md" style="margin-bottom: 5px;">
                                            {{ group.Name }}
                                        </h3>

                                        {% if group.Description != '' %}
                                            <div class="readmore_dates">
                                                {{group.Description}}
                                                <br />
                                            </div>
                                        {% else %}
                                            <div class="pull-right" style="display: inline-block;padding: 2rem;position: relative;height: 7rem;width: 100%;margin-top: -6rem;"></div>
                                        {% endif %}
                                        {%comment%}
                                        {%endcomment%}

                                        <p class="g-font-size-14-xs g-font-weight--300">
                                            <i class="fal fa-church"></i> {{ group.Campus.Name }}
                                        </p>

                                        <p class="g-font-size-14-xs g-font-weight--300">
                                            <i class="fal fa-calendar"></i>
                                            {% if group.Schedule.WeeklyDayOfWeek != null and group.Schedule.WeeklyDayOfWeek != "" %}
                                                {{ group.Schedule.WeeklyDayOfWeek }} {{  group.Schedule.WeeklyTimeOfDay | Date:'@ h:mm tt' }}
                                            {% else if dayofWeek != ''  %}
                                                {{ dayofWeek }} - Contact for Details
                                            {% else %}
                                                Contact for details
                                            {% endif %}
                                        </p>

                                        {%comment%}
                                        This does not work correctly in Chrome
                                        {% if meetingLocations > 1 %}
                                            <span style="
                                                background-color: black;
                                                border-radius: 100%;
                                                width: 25px;
                                                height: 25px;
                                                display: block;
                                                position: absolute;
                                                top: 0;
                                                right: 4px;
                                                color: white;
                                                font-weight: 800;
                                                font-size: 1rem;
                                                text-align: center;
                                            ">{{ meetingLocations }}</span>
                                        {% endif%}
                                        {%endcomment%}

                                        <p class="g-font-size-14-xs g-font-weight--300">
                                            <i class="fal fa-map-marker-alt"></i>
                                            {% if meetingLocations > 1 %}
                                                This group has multiple locations. Contact for details.
                                            {% elseif meetingLocations == 1 %}
                                                {% if neighborhoodName != 'none' and neighborhoodName != '' %}{{ neighborhoodName }}{% endif %}{% if groupZipCode != '' %}{% if neighborhoodName != 'none' and neighborhoodName != '' %}&emsp;{% endif %}{{ groupZipCode | Truncate:5,'' }}{% endif %}
                                            {% else %}
                                                A location has not been set yet. Contact for details.
                                            {% endif %}

                                        </p>

                                        <p class="g-font-size-14-xs g-font-weight--300">
                                            {% if otc == 'Yes' or handicapAcc == 'Yes'%}
                                                {% if otc == 'Yes' %}
                                                    <span><i class="fal fa-child"></i> Open to Children</span>
                                                {% endif %}
                                                {% if handicapAcc == 'Yes' %}
                                                    {% if otc == 'Yes' %}&emsp;{% endif %}<span><i class="fal fa-wheelchair"></i> Accessible</span>
                                                {% endif %}
                                            {% else %}
                                                <br>
                                            {% endif %}
                                            </p>

                                    </div>

                                    <div class="text-center g-margin-b-25--xs g-margin-b-30--md g-margin-x-10--xs" style="display:flex; align-content:space-between;">
                                        <div class="" style="flex:1 1 0;">
                                            {[ sebutton title:'Contact' href:'/groups/homegroups/contact/{{ group.Guid }}' type:'light' target:'' addclasses:'g-width-90-percent--xs se-btn--sm' theme:'2024' ]}
                                        </div>
                                        <div class="" style="flex:1 1 0;">
                                            {[ sebutton title:'Register' href:'/groups/homegroups/registration/{{ group.Id }}' type:'light' target:'' addclasses:'g-width-90-percent--xs se-btn--sm' theme:'2024' ]}
                                        </div>
                                    </div>

                                    <div class="mobile-only" style="position:absolute;top:1rem;right:1rem;">
                                        <a onclick="shareMessage('{{ group.Name | Replace:"'","\'"}}','Join me at {{ group.Name | Replace:"'","\'"}}!','{{ 'Global' | Attribute:'PublicApplicationRoot' }}groups/homegroups/registration/{{ group.Id }}')">
                                            <i class="fas fa-share-alt" style="color:#1D1F21"></i>
                                        </a>
                                    </div>

                                </div>
                            </div>

                        {% endif %}
                    {%endfor%}
                </div>

                <div id="noresultmsg" class="row" style="display: none;">
                    <div class="col-xs-12 text-center">
                        <div style="border: 1px solid rgba(32, 30, 29, 0.50); padding: 20px; border-radius: 5px;">
                            <p style="margin: 0px;">There are no home groups that match your selection.</p>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Readmore.js/2.2.0/readmore.min.js"></script>
<script>
    /*
    $(document).ready(function() {
        ///////////////////////////////////////////////////////////////
        /////////////// Select2, History, & Width Detect //////////////
        ///////////////////////////////////////////////////////////////

        $(window).on('resize', function() {
            //reapplyIso();
            $('.select2-campuses').select2({ width: '100%' });
            $('.select2-ministries').select2({ width: '100%' });
        });

        $(window).on('popstate', function(event) {
            event.preventDefault();
            // alert("pop");
            loadQueryStringParam();
            reapplyIso();
        });
    });*/

    $('[data-toggle="tooltip"]').tooltip();

    function toggleDropdown($selected) {
        // close all of the others - before opening this
        $('[data-control="#groupFilters"]').not($selected).attr('aria-expanded','false');
        //$('.select2-selection').select2('close');
        $selected.attr('aria-expanded', function (i, attr) {
            return attr == 'true' ? 'false' : 'true'
        });
    }

    /* When the user clicks on the button,
    toggle between hiding and showing the dropdown content */
    $('[data-toggle="dropdown-content"]').mousedown(function(e) {
        e.preventDefault();
        var $this = $( this );
        $this.parent().focus();
        toggleDropdown($this);
    });

    $('[data-control="#groupFilters"]').parent().focusout(function(e) {
        e.preventDefault();
        var $this = $( this );
        // var toggleId = $this.children("[data-toggle="dropdown-content"]").attr('data-reveal');
        $this.children("[data-toggle='dropdown-content']").attr('aria-expanded', 'false');
    });

    // Initialize Isotope/Groups
    var $grid = $('.isotope_wrap').isotope({
    itemSelector: '.isotope_item',
    percentPosition: true,
    layoutMode: 'fitRows'
    });

    // initialize ReadmoreJS
    $('.readmore_dates').readmore({
        speed: 200,
        lessLink: '<a class="pull-right uppercase" style="padding: 2rem;width: 100%;text-align: right;"><span class="se-carat se-carat--up"></span></a>',
        moreLink: '<a class="pull-right" style="display: inline-block;padding: 2rem;position: relative;height: 7rem;width: 100%;margin-top: -6rem;"><span class="pull-right se-carat se-carat--down" style="margin-top: 2rem;"></span></a>',
        embedCSS: false,
        collapsedHeight: 0,
        beforeToggle: function(tr, el, ex) {
            $(el).show();
            $('.isotope_wrap').isotope(isoOptions); // re-initialize
        },
        afterToggle: function( trigger, element, expanded ) {
            if ( expanded ) {
                element.css( "height", "" );
                element.css( "height", element.height() + "px" );
            }
            $('.isotope_wrap').isotope(isoOptions); // re-initialize
        }
    });

    if (Modernizr.mq('only all and (max-width: 720px)')) {
        // Not using isotope or readmore on mobile - it's heavy on JS (breaks old iphones)
        $('.isotope_wrap').addClass('is-showing-items');
    } else {
        var isoOptions = {
            itemSelector: '.isotope_item',
            percentPosition: true,
            layoutMode: 'fitRows'
        };
        // init Isotope
        $grid.addClass('is-showing-items').isotope(isoOptions);
    }

    // bind to buttons related to the day of the week
    $daysOfTheWeek = $('#daysOfTheWeek').on( 'click', '.button', function(e) {
    e.preventDefault();

    var $this = $( this );
    var filterValue = $this.attr('data-filter');
    $this.toggleClass('active');
    buildDaysFilters(filterValue);
    reapplyIso();
    });

    $('#se-handicap:checkbox').change(function(e) {
        e.preventDefault();
        buildHandicapFilter();
        reapplyIso();
    });

    $('#se-otc:checkbox').change(function(e) {
        e.preventDefault();
        buildOTCFilter();
        reapplyIso();
    });

    // bind to campus dropdown selection
    var campusSelected = '';
    $('.select2-campuses').select2({
    placeholder: 'All Locations'
    });
    $('.select2-campuses').on('select2:select', function (e) {
        e.preventDefault();
        var data = e.params.data;
        campusSelected = $(data.element).data('campus');

        // clear existing selections as a reset
        $("#typeSelected a.button").removeClass('active'); // remove any selections
        types_selected = []; // reset array history
        updateFilterCounts(); // update visually
        runFilters(); // update filters
        updatePath(); // update path

        buildCampusFilters(campusSelected);
        reapplyIso();
    });

    // bind to buttons related to the day of the week
    $typeSelected = $('#typeSelected').on( 'click', '.button', function(e) {
    e.preventDefault();
    var $this = $( this );
    var filterValue = $this.attr('data-type');
    $this.toggleClass('active');
    buildTypeFilters(filterValue);
    reapplyIso();
    });

    // handling types selected
    var types_selected = [];
    function buildTypeFilters(type) {
        if (~types_selected.indexOf(type)) {
            // remove from array (toggling)
            types_selected.splice($.inArray(type, types_selected),1);
        } else {
            // add to array
            if (type != '' && type != undefined) {
                types_selected.push(type);
            }
        }
    }

    // handling campuses selected
    var campus_filters_selected = [];
    function buildCampusFilters(campus) {
        // reset campus array, campuses are only selected one at a time
        campus_filters_selected = [];
        // add to array
        if (campus != '' && campus != undefined) {
            campus_filters_selected.push(campus);
        }
        // console.debug(campus_filters_selected);
    }
    {% if selectedCampus.Id > 0 %}
    // this initializes the campus selection based on the URL params
    buildCampusFilters('{{ selectedCampus.Name | Downcase | Replace:" ",""}}');
    {% endif %}

    // handling days selected
    var days_selected = [];
    function buildDaysFilters(day) {
        if (~days_selected.indexOf(day)) {
            // remove from array (toggling)
            days_selected.splice($.inArray(day, days_selected),1);
        } else {
            // add to array
            if (day != '' && day != undefined) {
                days_selected.push(day);
            }
        }
    }

    // handling handicap selection
    var handicap_selected = [];
    function buildHandicapFilter() {
        // reset campus array, campuses are only selected one at a time
        handicap_selected = [];
        var checkbox = document.getElementById('se-handicap').checked ? 'yes' : 'no';
        // add to array
        if (checkbox != undefined && checkbox == 'yes') {
            handicap_selected.push(checkbox);
        }
    }

    // handling open-to-children (otc) selection
    var otc_selected = [];
    function buildOTCFilter() {
        // reset campus array, campuses are only selected one at a time
        otc_selected = [];
        var checkbox = document.getElementById('se-otc').checked ? 'yes' : 'no';
        // add to array
        if (checkbox != undefined && checkbox == 'yes') {
            otc_selected.push(checkbox);
        }
    }

        updateMinistriesAvail = (string) => {
            console.log('It should be updating');
            {%- definedvalue where:'DefinedTypeId==52' -%}
            {%- assign definedvalueItemsSorted = definedvalueItems | Sort: 'Order' -%}
            {%- for definedValue in definedvalueItemsSorted -%}
                {%- if definedValue != '' -%}
                    var ministryLength{{definedValue.Id}} = $("div[data-type*='{{definedValue.Id}}']:visible").length;
                    if (ministryLength{{definedValue.Id}} == 0) {
                        $("a[data-type*='{{definedValue.Id}}']").addClass('hidden');
                    } else {
                        $("a[data-type*='{{definedValue.Id}}']").removeClass('hidden');
                    }
                    console.log('$("div[data-type*=\'{{definedValue.Id}}\']:visible").length',ministryLength{{definedValue.Id}});
                    $("a[data-type*='{{definedValue.Id}}'] span.count").html(`(${ministryLength{{definedValue.Id}}})`);
                {%- endif -%}
            {%- endfor -%}
            {%- enddefinedvalue -%}
        }

        let prevCampusState = campus_filters_selected[0];
        let initalLoad = true;
        $grid.on('arrangeComplete',
            function( event, filteredItems ) {

                // only update when a campus selection is made.
                if (prevCampusState != campus_filters_selected[0] || initalLoad == true ) {
                    prevCampusState = campus_filters_selected[0]; // update to recent campus selection to keep track
                    initalLoad = false; // update to only load once

                    // grab all values available by campus
                    let allhash = [];
                    console.log('prevCampusState',prevCampusState);
                    if ( prevCampusState != "" && typeof prevCampusState != 'undefined') {
                        const allCampusItems = $(".isotope_wrap .homegroup[data-campus*='"+ prevCampusState +"'");
                        allCampusItems.map((key, value) => {
                            let array = value.attributes['data-type'].value.split(',');
                            array.map((value) => {
                                allhash.push(value);
                            });
                        });
                        allhash = [...new Set(allhash)];
                    } else if (typeof prevCampusState == 'undefined') {
                        // grab all items
                        const allCampusItems = $(".isotope_wrap .homegroup");
                        allCampusItems.map((key, value) => {
                            let array = value.attributes['data-type'].value.split(',');
                            array.map((value) => {
                                allhash.push(value);
                            });
                        });
                        allhash = [...new Set(allhash)];
                    }
                    console.log('allhash',allhash);

                    // console.log('allhash',allhash);
                    // console.log('filteredItems',filteredItems);
                    // grab all items with the campus id...
                    /*for (const li of Object.values(listA.getElementsByClassName('li'))) {
                        if (li.classList.contains('active')) {
                        listB.append(li);
                        } else {
                        listC.append(li);
                        }
                    }*/
                    // grab all available types per campus opportunities...

                    /*console.log( 'Isotope arrange completed on ' +
                    filteredItems.length + ' items' );
                    filteredItems.map((e) => {
                        //console.log('element',e.element.attributes['data-type'].value.split(','))
                        let array = e.element.attributes['data-type'].value.split(',')
                        array.map((value) => {
                            hash.push(value);
                        });
                    });
                    hash = [...new Set(hash)];
                    console.log('hash', hash);*/

                    // update the ministry dropdown with only what is available FROM THE CAMPUS
                    $("#typeSelected a.button").addClass('hidden');
                    allhash.map((uniqueId) => {
                        $("#typeSelected a[data-type*='"+ uniqueId +"']").removeClass('hidden');
                    });

                    // Show a message if no ministry options are available
                    console.log('Available Ministries',$("#typeSelected a.button").not($('.hidden')).length)
                    if ($("#typeSelected a.button").not($('.hidden')).length  == 0) {
                        $("#typeSelected #noOptions").show();
                    } else {
                        $("#typeSelected #noOptions").hide();
                    }
                    //updateMinistriesAvail();
                }
            }
        );

    function runFilters() {
        var filterSelectors = [];
        // if days are selected
        if (days_selected.length != 0) {
            filterSelectors.push(createFilters(days_selected, 'data-day'));
        }
        // if types are selected
        if (types_selected.length != 0) {
            filterSelectors.push(createFilters(types_selected, 'data-type'));
        }
        // if campus are selected
        if (campus_filters_selected.length != 0) {
            filterSelectors.push(createFilters(campus_filters_selected, 'data-campus'));
        }
        // if handicap is selected
        if (handicap_selected.length != 0) {
            filterSelectors.push(createFilters(handicap_selected, 'data-handicap-accessible'));
        }
        // if otc is selected
        if (otc_selected.length != 0) {
            filterSelectors.push(createFilters(otc_selected, 'data-open-to-children'));
        }
        var filterArray = [];
        if (filterSelectors.length!=0){
            filterSelectors.forEach(function(filterSet, index, array) {
                if (index==0) {
                    filterArray = filterSet;
                } else {
                    var tempArray = [];
                    filterArray.forEach(function(primaryFilter) {
                        filterSet.forEach(function(secondaryFilter) {
                            tempArray.push(primaryFilter+secondaryFilter);
                        });
                    });
                    filterArray = tempArray;
                }
            });
        }
        console.log(filterArray.join(','));
        return filterArray.join(',');
    }

    function reapplyIso() {
        updateFilterCounts();
        $grid.isotope({
        itemSelector: '.isotope_item',
        percentPosition: true,
        layoutMode: 'fitRows',
        filter: runFilters()
        });
        let filteredElements = $grid.isotope('getFilteredItemElements');
        showNoResults(filteredElements);
        var newPath = updatePath();
    }

    // display message box if no filtered items
    showNoResults = (array) => {
        console.log('Count of items: '+array.length)
        if (array.length == 0) {
            $('#noresultmsg').show();
        } else {
            $('#noresultmsg').hide();
        }
    }

    function updateFilterCounts() {
        // handling selected filters
        if(days_selected.length) {
            $("span#MeetsOnFilter span.count").html("("+days_selected.length+")");
        } else {
            $("span#MeetsOnFilter span.count").html("");
        }
        if(types_selected.length) {
            $("span#GroupTypeFilter span.count").html("("+types_selected.length+")");
        } else {
            $("span#GroupTypeFilter span.count").html("");
        }
    }

    function createFilters(arrayList, selector) {
        var output = [];
        if (arrayList.length != 0) {
            // make string of selectors
            arrayList.forEach(function(item, index, array) {
                output.push('['+selector+'*="'+item+'"]');
            });
        }
        return output;
    }


    //This is for the zipcode :)
    $zipcode_input = $('#se-zipcode')

    $zipcode_input.keydown( function (e) {
        if (e.keyCode == 13) {
            e.preventDefault();
        }
    });

    $zipcode_input.keyup(function(){
        var zipcode = $zipcode_input.val();
        var $homegroup = $('.homegroup');
        if (zipcode.length==5){
            $('.se-zipcode-loading').removeClass('hidden');
            $.getJSON(
            "/api/groupmanager/homegroups/60/"+zipcode,
            function(data){
                if (zipcode.length!=5){
                    $('.se-zipcode-loading').addClass('hidden');
                    return
                }
                $homegroup.attr("data-distance",Number.MAX_VALUE);
                $.each( data, function( key, val ){
                    $("div[data-groupid='"+key+"']").attr("data-distance",val);
                });
                $homegroup.trigger('datachange');
                // update path with zipcode
                var newPath = updatePath();
            });
        } else {
            $homegroup.find('div.distance-container').each(function(){
            $(this).addClass("hidden");
            });
            $grid.isotope();
        }
        // update path with zipcode
        var newPath = updatePath();
    });

    // Restricts input for the given textbox to the given inputFilter.
    function setInputFilter(textbox, inputFilter) {
    ["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop"].forEach(function(event) {
        textbox.addEventListener(event, function() {
        if (inputFilter(this.value)) {
            this.oldValue = this.value;
            this.oldSelectionStart = this.selectionStart;
            this.oldSelectionEnd = this.selectionEnd;
        }
        });
    });
    }

    // Restrict input to digits
    setInputFilter(document.getElementById("se-zipcode"), function(value) {
        return /^\d*$/.test(value);
    });

    $('.homegroup').on('datachange', function(e, key){
        var $this = $( this );
        var distanceVal = $this.attr('data-distance');
        if (distanceVal != undefined && distanceVal != '' && distanceVal != Number.MAX_VALUE) {
            $this.find('span.distance').html(distanceVal);
            if($this.find('div.distance-container').hasClass("hidden")){
                $this.find('div.distance-container').removeClass('hidden');
            }
        }
        $grid.isotope('updateSortData').isotope({
            getSortData: {
                distance: '[data-distance] parseFloat',
            },
            sortBy: [ 'distance' ]
        });
        $('.se-zipcode-loading').addClass('hidden');
    });

    loadQueryStringParam();

    ///////////////////////////////////////////////////
    ///////////////// URL Filtering ///////////////////
    ///////////////////////////////////////////////////
    function parseQueryString() {
        var str = window.location.search;
        var objURL = {};
        str.replace(
            new RegExp( "([^?=&]+)(=([^&]*))?", "g" ),
            function( $0, $1, $2, $3, $4 ){
                objURL[ $1 ] = $3;
            }
        );
        // console.log(objURL);
        return objURL;
    };

    function loadQueryStringParam() {
        var params = parseQueryString();
        // console.log(params);
        if (params) {
            // campus is preselected with Lava

            // preselect options
            if(params["meet"]) {
                var types = params["meet"].split(',');
                for (i = 0; i < types.length; i++) {
                    $('#daysOfTheWeek').find('[data-filter='+types[i]+']').filter(function () {
                        buildDaysFilters(types[i]);
                        return $(this).toggleClass('active');
                    });
                }
            }
            if(params["type"]) {
                var types = params["type"].split(',');
                for (i = 0; i < types.length; i++) {
                    $('#typeSelected').find('[data-type='+types[i]+']').filter(function () {
                        buildTypeFilters(types[i]);
                        return $(this).toggleClass('active');
                    });
                }
            }
            if(params["zipcode"]) {
                var types = params["zipcode"].split(',');
                var zipcode = $zipcode_input.val(types[0]); // sets input value
                $zipcode_input.keyup();
            }
            if(params["handicap"]) {
                var types = params["handicap"].split(',');
                if (types[0] = 'yes') {
                    document.getElementById("se-handicap").checked = true;
                    buildHandicapFilter();
                }
            }
            if(params["otc"]) {
                var types = params["otc"].split(',');
                if (types[0] = 'yes') {
                    document.getElementById("se-otc").checked = true;
                    buildOTCFilter();
                }
            }
            updateFilterCounts();
            reapplyIso();
        }

    }

    function updatePath() {
        var baseUrl = [location.protocol, '//', location.host].join('');
        var parts = location.pathname.split('/');
        //var urlParams = new URLSearchParams(window.location.search);

        // build urlParams
        var urlParams = '';
        // campus is already taken care of.

        // add day of the week meetings
        if (days_selected && days_selected.length) {
            urlParams = urlParams + 'meet=' + days_selected.join(',');
        }
        // add group types
        if (types_selected && types_selected.length) {
            urlParams = urlParams + '&type=' + types_selected.join(',');
        }
        // add zipcode
        if (typeof $zipcode_input !== 'undefined' && $zipcode_input.val()) {
            // $zipcode_input
            urlParams = urlParams + '&zipcode=' + $zipcode_input.val();
        }
        // add handicap
        if (handicap_selected && handicap_selected.length) {
            urlParams = urlParams + '&handicap=' + handicap_selected.join(',');
        }
        // add otc
        if (otc_selected && otc_selected.length) {
            urlParams = urlParams + '&otc=' + otc_selected.join(',');
        }

        // Set some defaults;
        parts[1] = 'groups'
        parts[2] = 'homegroups';
        parts[3] = parts[3]||'all';
        // parts[3] = parts[3]||'all';
        // Set default part one of Groups

        // if campus is preselected
        if (campus_filters_selected.length != 0) {
            parts[3] = campus_filters_selected[0];
        } else {
            parts[3] = 'all';
        }

        window.history.pushState({}, '', baseUrl + parts.join('/') + "?" + decodeURIComponent(urlParams.toString()));
        // console.log( "key: " + key);
        // console.log( "value:" + value );
        // console.log( "parts:" + parts );
        return parts.join( '/' ) + "?" + decodeURIComponent(urlParams.toString());
    }

    ///////////////////////////////////////////////////
    ////////////// Listen for Back Clicks /////////////
    ///////////////////////////////////////////////////
    window.onpopstate = function(event) {
    // back to the same page without the filters
    //window.location.replace(window.location.protocol + "//" + window.location.host + window.location.pathname);

    // OPTIONAL - back to previous filter/result
    // var url_string = window.location.href;
    // var url = new URL(url_string);
    // var c = url.searchParams.get("campusId");
    // // console.log(c);
    // runCampusFilters(c);
    };
</script>

<script>
    function shareMessage(title, message, url) {
    if (navigator.share) {
        navigator.share({
            title: title,
            text: message + '\n',
            url: url
        })
            .then(() => console.log("Message shared successfully!"))
            .catch((error) => console.error("Error sharing message:", error));
    } else {
        console.log("Share API is not supported in this browser.");
    }
}

function isMobileDevice() {
    return /Mobi|Android/i.test(navigator.userAgent);
}

document.addEventListener('DOMContentLoaded', function() {
    var elements = document.getElementsByClassName('mobile-only');
    for (var i = 0; i < elements.length; i++) {
        if (isMobileDevice()) {
            elements[i].style.display = 'block';
        } else {
            elements[i].style.display = 'none';
        }
    }
});
</script>
